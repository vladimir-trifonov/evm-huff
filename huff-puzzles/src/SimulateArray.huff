
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 * In this puzzle, the task is to simulate an array in Huff using the "exact" storage pattern as solidity. Expected functions can; 
 *      - Push numbers onto a array, 
 *      - Pop the last index from the array,
 *      - View what's stored at an index, 
 *      - Gets the length of the array, 
 *      - Write to an index if it is valid.
 *
 *      - Writes and reads outside of length revert. 
 *      - Popping off a zero length array reverts.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function pushh(uint256 num) payable returns()
 #define function popp() payable returns()
 #define function read(uint256 index) payable returns(uint256)
 #define function length() payable returns(uint256)
 #define function write(uint256 index, uint256 num) payable returns()

 #define error OutOfBounds()
 #define error ZeroArray()

 #define macro PUSHH() = takes (0) returns (0) {
  0x04 calldataload 
  0x00
  0x00 mstore
  0x40 0x00 sha3
  dup1
  dup1
  sload
  0x01
  add
  dup1
  swap2
  add
  swap2
  sstore
  sstore
  0x00 0x00 return
 }

 #define macro POPP() = takes (0) returns (0) {
  0x00
  0x00 mstore
  0x40 0x00 sha3
  dup1
  dup1
  sload 
  dup1 iszero revert_empty jumpi
  dup1
  swap2
  add
  sload
  0x00 mstore
  0x01
  swap1
  sub
  swap1
  sstore
  0x20 0x00 return

  revert_empty:
    __ERROR(ZeroArray)
    0x00 mstore
    0x04 0x00 revert
 }

 #define macro READ() = takes (0) returns (0) {
  0x04 calldataload 
  0x01
  add
  dup1
  0x00
  0x00 mstore
  0x40 0x00 sha3
  dup1
  sload
  swap1
  swap3
  gt revert_out_of_bonds jumpi
  add
  sload
  0x00 mstore
  0x20 0x00 return

  revert_out_of_bonds:
    __ERROR(OutOfBounds)
    0x00 mstore
    0x04 0x00 revert
 }

 #define macro LENGTH() = takes (0) returns (0) {
  0x00
  0x00 mstore
  0x40 0x00 sha3
  sload
  0x00 mstore
  0x20 0x00 return
 }

 #define macro WRITE() = takes (0) returns (0) {
  0x24 calldataload 
  0x04 calldataload 
  0x01
  add
  dup1
  0x00
  0x00 mstore
  0x40 0x00 sha3
  dup1
  sload
  swap1
  swap3
  gt revert_out_of_bonds jumpi
  add
  sstore
  0x00 0x00 return

  revert_out_of_bonds:
    __ERROR(OutOfBounds)
    0x00 mstore
    0x04 0x00 revert
 }

 #define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(pushh) eq pushh jumpi
    dup1 __FUNC_SIG(popp) eq popp jumpi
    dup1 __FUNC_SIG(read) eq read jumpi
    dup1 __FUNC_SIG(length) eq length jumpi
    dup1 __FUNC_SIG(write) eq write jumpi

    0x00 0x00 revert

    pushh:
        PUSHH()
    popp:
        POPP()
    read:
        READ()
    length:
        LENGTH()
    write:
        WRITE()
 }