
/** 
 *  MULTIPLY HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like multiplication etc
 *  
 *  The task is to write within the `MAIN` macro below, a function named `multiply` that takes in 2 uint256s, and returns their product. Be sure to revert on overflow
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function multiply(uint256, uint256) payable returns(uint256)

#define macro MULTIPLY() = takes (0) returns (0) {
  0x04 calldataload
  iszero
  zero_param jumpi

  0x04 calldataload
  0x24 calldataload
  mul
  dup1 
  0x04 calldataload
  swap1
  div
  0x24 calldataload
  eq
  no_overflow jumpi

  0x00 0x00 revert
    
  zero_param: 
    0x00 0x00 mstore
    0x20 0x00 return

  no_overflow:
    0x00 
    mstore
    0x20 0x00 return
}

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(multiply) eq multiply jumpi

    0x00 0x00 revert

    multiply:
        MULTIPLY()
}