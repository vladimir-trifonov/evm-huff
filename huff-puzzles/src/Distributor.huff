 
/** 
 *  DISTRIBUTE HUFF EXERCISE
 *  
 *  The task is to enable this contract, when called with function `distribute(address[])` to
 *  distribute the value sent with the call to each address in the address array as evenly.
 *  Revert if array length is 0
 *  Assume that array length would always be less than or equal to msg.value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function distribute(address[]) payable returns()

#define macro UINT_MAX() = takes(0) returns(1) {
    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
}

#define macro SUB1() = takes(1) returns(1) {
   UINT_MAX()
   add
}

#define macro ITEM_OFFSET() = takes(1) returns (1) {
    // [index]
    0x05 shl  // [index * 32]
    0x40 add
}

#define macro GET_ITEM() = takes(1) returns (1) {
    // [index]
    ITEM_OFFSET()
    mload // [item]
}

#define macro SEND_ETHER() = takes (2) returns (1) {
    // Send the ether
    0x00    // [0, amount, address]
    dup1    // [0, 0, amount, address]
    dup1    // [0, 0, 0, amount, address]
    dup1    // [0, 0, 0, 0, amount, address]
    dup5    // [amount, 0, 0, 0, 0, amount, address]
    dup7    // [address, amount, 0, 0, 0, 0, amount]
    gas     // [gas, address, amount, 0, 0, 0, 0, amount, address]
    call    // [success, amount, address]

    // Clean the stack
    swap2   // [address, amount, success]
    pop     // [success, address]
    pop     // [success]
 }

 #define macro DISTRIBUTE() = takes (0) returns (0) {
  0x04 calldataload 
  dup1 iszero return_empty jumpi
  // Store array in memory
  calldatasize
  0x04 0x00 // [memTo, calldataFrom, numBytes]
  calldatacopy
  0x20 mload // [length]
  dup1 // [length, length]
  callvalue // [value, length, length]
  div // [amount, length]
  swap1 // [length, amount]

  dup1 0x00 eq return_revert jumpi

  SUB1()  // [index, amount] (length - 1)
  swap1 // [amount, index]
  dup2 // [index, amount, index]

  transfer:
    UINT_MAX() eq return_empty jumpi
    dup2 // [index, amount, index]
    GET_ITEM() // [item, amount, index]
    swap1 // [amount, item, index]
    dup1 // [amount, amount, item, index]
    swap2 // [item, amount, amount, index]
    swap1 // [amount, item, amount, index]
    SEND_ETHER()
    iszero return_revert jumpi
    swap1 // [index, amount]
    SUB1() // [index - 1, amount]
    swap1 // [amount, index - 1]
    dup2 // [index - 1, amount, index - 1]
    transfer jump

  0x00 0x00 return

  return_revert:
    0x00 0x00 revert

  return_empty:
    0x00 0x00 return
 }


 #define macro MAIN() = takes(0) returns(0) {
  0x00 calldataload 0xE0 shr
  dup1 __FUNC_SIG(distribute) eq distribute jumpi

  0x00 0x00 revert

  distribute:
      DISTRIBUTE()
 }