 
/** 
 *  SEND_ETHER HUFF EXERCISE
 *  
 *  The task is to enable this contract, when called with function `sendEther(address)` to
 *  transfer the value sent with the call to the address in the argument.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function sendEther(address) payable returns()

 #define macro SEND_ETHER() = takes (0) returns (0) {
    0x04 calldataload 
    0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff // Address mask
    and
    callvalue // [amount, address]

    // Send the ether
    0x00    // [0, amount, address]
    dup1    // [0, 0, amount, address]
    dup1    // [0, 0, 0, amount, address]
    dup1    // [0, 0, 0, 0, amount, address]
    dup5    // [amount, 0, 0, 0, 0, amount, address]
    dup7    // [address, amount, 0, 0, 0, 0, amount]
    gas     // [gas, address, amount, 0, 0, 0, 0, amount, address]
    call    // [success, amount, address]

    // Clean the stack
    swap2   // [address, amount, success]
    pop     // [success, address]
    pop     // [success]
    0x00 mstore
    0x20 0x00 return
 }


 #define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(sendEther) eq sendEther jumpi

    0x00 0x00 revert

    sendEther:
        SEND_ETHER()
 }