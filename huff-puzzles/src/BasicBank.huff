/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro BALANCE_OF() = takes (0) returns (0) {
  0x04 calldataload 
  0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff // Address mask
  and
  0x00 mstore
  0x40 0x00 sha3
  sload
  0x00 mstore
  0x20 0x00 return
}

#define macro WITHDRAW() = takes (0) returns (0) {
  0x04 calldataload 
  dup1 iszero return_empty jumpi

  caller // [sender, value]
  0x00 mstore
  0x40 0x00 sha3
  dup1 sload
  dup3 dup1 dup3
  lt return_revert jumpi
  
  swap1
  sub
  dup1
  dup3
  sstore
  pop
  pop
  caller
  swap1

  // Send the ether
  0x00    
  dup1    
  dup1    
  dup1   
  dup5    
  dup7    
  gas     
  call

  swap2   
  pop     
  pop     
  0x00 mstore
  0x20 0x00 return

  return_revert:
    0x00 0x00 revert

  return_empty:
    0x00 0x00 return
}

#define macro DEPOSIT() = takes (0) returns (0) {
  callvalue 
  caller // [sender, value]
  0x00 mstore
  0x40 0x00 sha3
  dup1 sload
  dup3
  add
  swap1
  sstore
  0x00 0x00 return
}

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(balanceOf) eq balanceOf jumpi
    dup1 __FUNC_SIG(withdraw) eq withdraw jumpi

    callvalue
    iszero return_empty jumpi

    DEPOSIT()
      
    balanceOf:
        BALANCE_OF()

    withdraw:
        WITHDRAW()

    return_empty:
      0x00 0x00 return
}
