
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 *  
 *  The task is to write within the `MAIN` macro below, write a functionality that takes an array of uint256 as an argument and returns the sum of all the numbers
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function sumArray(uint256[]) payable returns(uint256)

#define macro UINT_MAX() = takes(0) returns(1) {
    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
}

#define macro SUB1() = takes(1) returns(1) {
   UINT_MAX()
   add
}

#define macro ITEM_OFFSET() = takes(1) returns (1) {
    // [index]
    0x05 shl  // [index * 32]
    0x40 add
}

#define macro GET_ITEM() = takes(1) returns (1) {
    // [index]
    ITEM_OFFSET()
    mload // [item]
}

#define macro SUM_ARRAY() = takes (0) returns (0) {
  // Store array in memory
  calldatasize
  0x04 0x00 // [memTo, calldataFrom, numBytes]
  calldatacopy
  0x20 mload // [length]

  dup1 0x02 gt return_first jumpi

  SUB1()  // [index] (length - 1)
  0x00  // [sum, index]
  dup2 // [index, sum, index]

  sum jump

  sum:
    UINT_MAX() eq return_sum jumpi
    dup2 // [index, sum, index]
    GET_ITEM() // [item, sum, index]
    add // [sum + item, index]
    swap1 // [index, sum + item]
    SUB1() // [index - 1, sum + item]
    swap1 // [sum + item, index - 1]
    dup2 // [index - 1, sum + item, index - 1]
    sum jump

  return_sum:
    0x00 mstore
    0x20 0x00 return

  return_first:
    0x00
    GET_ITEM()
    0x00 mstore
    0x20 0x00 return
}

#define macro MAIN() = takes(0) returns(0) {
  0x00 calldataload 0xE0 shr
  dup1 __FUNC_SIG(sumArray) eq sumArray jumpi

  0x00 0x00 revert

  sumArray:
      SUM_ARRAY()
}