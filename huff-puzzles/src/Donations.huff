/** 
 *  DONATIONS HUFF EXERCISE
 *  
 *  The task is to Implement solidity's "receive" functionality which allows sending ether to a smart contract without any calldata
 *  also have a getter function that returns how much an address has donated. Addresses can donate several times
 */

#define function donated(address) payable returns(uint256)

#define macro DONATED() = takes (0) returns (0) {
  0x04 calldataload 
  0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff // Address mask
  and
  0x00 mstore
  0x40 0x00 sha3
  sload
  0x00 mstore
  0x20 0x00 return
}

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(donated) eq donated jumpi

    callvalue
    iszero return_empty jumpi

    callvalue 
    caller // [sender, value]
    0x00 mstore
    0x40 0x00 sha3
    dup1 sload
    dup3
    add
    swap1
    sstore
    0x00 0x00 return

    donated:
        DONATED()

    return_empty:
      0x00 0x00 return
}